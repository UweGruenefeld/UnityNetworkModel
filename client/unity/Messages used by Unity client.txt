========================================================
 MESSAGES
========================================================


Subscribe

{
	"subscriptionChange":"subscribe",
	"channel":
}

Attempts to subscribe to a channel. 
If the channel exists on the server, the server should send all assets, gameobjects and components currently saved on that channel to the client and notify the client of any future changes. 
If the channel doesn't exist on the server, the server should create a new empty channel of that name and notify the client of any future changes to that channel.

Parameters:
	channel: String; The channel to subscribe to.


========================================================


Unsubscribe

{
	"subscriptionChange":"unsubscribe",
	"channel":
}

Attempts to unubscribe from a channel. The server should no longer notify the client of any changes to that channel.

Parameters:
	channel: String; The channel to unsubscribe from.


========================================================


Update GameObject

{
	"type":"gu",
	"name":
	"channel":
	"timestamp":
	"StringParam1":
	"StringParam2":"",
	"ListParam1":"",
	"ListParam2":""
}

Notifies server that a new GameObject was created or an existing GameObject has changed its parent object. If no GameObject of that name exists on that channel, the GameObject should be created. If a GameObject of that name does exist on the server, its parent property should be updated to match the message.

Parameters:
	name: String; The name of the GameObject to update.
	channel: String; The channel the changes should be saved on.
	timestamp: BinaryDate; The Timestamp of when the request was created. Changes should only be applied if the timestamp is newer or equal than the last change to the GameObject on the server. Can be set to 0 by the client.
	StringParam1: String; The name of the parent GameObject in the object hierarchy. "root" if the GameObject in question is the one that the NetworkModel is attached to.


========================================================


Delete GameObject

{
	"type":"gd",
	"name":
	"channel":
	"timestamp":
	"StringParam1":"",
	"StringParam2":"",
	"ListParam1":"",
	"ListParam2":""
}

Notifies server that a GameObject should be deleted from a channel.

Parameters:
	name: String; The name of the GameObject to delete.
	channel: String; The channel the GameObject should be deleted from.
	timestamp: BinaryDate; The Timestamp of when the request was created. Changes should only be applied if the timestamp is newer or equal than the last change to the GameObject on the server. Can be set to 0 by the client.


========================================================


Update Components

{
	"type":"cu",
	"name":
	"channel":
	"timestamp":
	"StringParam1":"",
	"StringParam2":"",
	"ListParam1":
	"ListParam2":
}

Notifies server that one or more Components for a specific GameObject were created or changed. If the GameObject exists on the given channel, the server should save the new parameters for each component type given, overwriting existing values is necessary.

Parameters:
	name: String; The name of the GameObject the components belong to.
	channel: String; The channel the changes should be saved on.
	timestamp: BinaryDate; The Timestamp of when the request was created. Changes should only be applied if the timestamp is newer or equal than the last change to the GameObject on the server. Can be set to 0 by the client.
	ListParam1: List<String>; The types of the components to add or update.
	ListParam2: List<JSONString>; The parameters of the components in the same order as ListParam1. The format of these parameters for each component type is given below.


========================================================


Delete Components

{
	"type":"cd",
	"name":
	"channel":
	"timestamp":
	"StringParam1":"",
	"StringParam2":"",
	"ListParam1":
	"ListParam2":""
}

Notifies server that one or more Components for a specific GameObject should be deleted.

Parameters:
	name: String; The name of the GameObject the components belong to.
	channel: String; The channel the changes should be saved on.
	timestamp: BinaryDate; The Timestamp of when the request was created. Changes should only be applied if the timestamp is newer or equal than the last change to the GameObject on the server. Can be set to 0 by the client.
	ListParam1: List<String>; The types of the components to delete.


========================================================


Update Asset

{
	"type":"au",
	"name":
	"channel":
	"timestamp":
	"StringParam1":
	"StringParam2":
	"ListParam1":"",
	"ListParam2":""
}

Notifies server that a new asset has been created or that an existing asset has been changed. If the Asset does not exists on the given channel, the server should create the asset with the given type and parameters. If the Asset already exists on the channel, the server should update the type and parameters of that Asset.

Parameters:
	name: String; The name of the Asset to update.
	channel: String; The channel the changes should be saved on.
	timestamp: BinaryDate; The Timestamp of when the request was created. Changes should only be applied if the timestamp is newer or equal than the last change to the GameObject on the server. Can be set to 0 by the client.
	StringParam1: String; The type of the asset.
	StringParam2: JSONString; Parameters for the asset. The format of these parameters for each asset type is given below.


========================================================


Delete Asset

{
	"type":"ad",
	"name":
	"channel":
	"timestamp":
	"StringParam1":"",
	"StringParam2":"",
	"ListParam1":"",
	"ListParam2":""
}

Notifies server that an asset should be deleted from a channel.

Parameters:
	name: String; The name of the Asset to update.
	channel: String; The channel the changes should be saved on.
	timestamp: BinaryDate; The Timestamp of when the request was created. Changes should only be applied if the timestamp is newer or equal than the last change to the GameObject on the server. Can be set to 0 by the client.


========================================================
 COMPONENT-PARAMETERS
========================================================


Script

Parameters:
	type: String; AssemblyQualifiedName of ScriptType
	value: JSONString; JSON representation of public variables of the script


========================================================


Transform

Parameters:
	p: Vector3; Position
	s: Vector3; Scale
	r: Quaternion; Rotation
	t: String; Tag of the associated GameObject


========================================================


Camera

Parameters:
	d: float; Camera depth
	n: float; Near ClipPlane
	f: float; Far ClipPlane
	v: float; Field of View
	b: Color; background Color
	c: CameraClearFlags; clearFlags (SolidColor, Skybox, ...)


========================================================


Light

Parameters:
	t: LightType; Light type (Point, Spot, Directional)
	c: Color; Light Color
	i: float; Light Intensity
	b: float; Bounce Intensity



========================================================


MeshFilter

Parameters:
	m: String; Name of the Mesh Asset to use;


========================================================


MeshRenderer

Parameters:
	m: String; Name of the Material Asset to use;


========================================================


LineRenderer

Parameters:
	m: String; Name of the Material Asset to use
	p: Vector3[]; Array of corner positions
	w: float; Width multiplier
	l: bool; Loop line
	ca: int; Number of cap Vertices
	co: int; Number of corner Vertices
	t: LineTextureMode; texture Mode
	cs: Color; Color at start of line
	ce: Color; Color at end of line


========================================================


MeshCollider

Parameters:
	m: String; Name of the Mesh Asset to use;


========================================================


BoxCollider

Parameters:
	c: Vector3; Box center
	s: Vector3; Box size


========================================================


SphereCollider

Parameters:
	c: Vector3; Sphere center
	r: float; Sphere radius


========================================================
 ASSET-PARAMETERS
========================================================


Mesh

Parameters:
	v: Vector3[]; Positions of the mesh vertices
	n: Vector3[]; Normals of the mesh vertices in same order as v
	u: Vector2[]; Texture coordinates of the mesh vertices in the same order as v
	t: int[]; Triangles in the mesh. Three consecutive ints give the indices of the vertices that form one triangle.


========================================================


Material

Parameters:
	n: String; Shader name
	k: String[]; Shader keywords
	c: Color; Main color of the material, if the shader used has a "_Color" property
	t: String; Name of the Texture2D Asset to use; "null" if not used
	o: Vector2; Main texture offset
	s: Vector2; Main texture scale



========================================================


Texture2D

Parameters:
	w: int; Texture width;
	h: int; Texture height;
	p: Color[]; Array of colors of each pixel